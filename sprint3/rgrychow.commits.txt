ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  1) import { doc, setDoc, getDoc, collection } from "firebase/firestore";
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  2) import { auth, db } from "../firebase";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  3) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  4) // ‚úÖ Save a single workout set to Firestore
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  5) export async function saveWorkout(
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  6)   day: string,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  7)   exercise: string,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  8)   setNum: number,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  9)   reps: number,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 10)   weight: number
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 11) ) {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 12)   try {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 13)     const user = auth.currentUser;
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 14)     if (!user) throw new Error("User not authenticated");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 15) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 16)     // Path: users/{uid}/workouts/{day}/exercises/{exercise}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 17)     const exerciseRef = doc(db, "users", user.uid, "workouts", day, "exercises", exercise);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 18) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 19)     // Each exercise has multiple sets, we‚Äôll merge them under 'sets'
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 20)     await setDoc(
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 21)       exerciseRef,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 22)       {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 23)         date: day,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 24)         name: exercise,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 25)         sets: {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 26)           [`set_${setNum}`]: { reps, weight },
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 27)         },
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 28)       },
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 29)       { merge: true }
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 30)     );
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 31) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 32)     console.log("‚úÖ Saved to Firestore:", {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 33)       user: user.uid,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 34)       day,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 35)       exercise,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 36)       setNum,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 37)       reps,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 38)       weight,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 39)     });
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 40)   } catch (error) {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 41)     console.error("‚ùå Firestore save error:", error);
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 42)   }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 43) }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 44) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 45) // ‚úÖ Fetch all workouts for a given day
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 46) export async function fetchDayData(day: string) {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 47)   try {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 48)     const user = auth.currentUser;
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 49)     if (!user) throw new Error("User not authenticated");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 50) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 51)     const dayRef = doc(db, "users", user.uid, "workouts", day);
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 52)     const daySnap = await getDoc(dayRef);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 53) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 54)     if (daySnap.exists()) {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 55)       console.log("üìÑ Fetched workout:", daySnap.data());
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 56)       return daySnap.data();
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 57)     } else {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 58)       console.log("‚ö†Ô∏è No data found for that day:", day);
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 59)       return null;
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 60)     }
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 61)   } catch (error) {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 62)     console.error("‚ùå Firestore fetch error:", error);
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 63)     return null;
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 64)   }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 65) }

2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400   1) // app/(tabs)/progress.tsx
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400   2) import React, { useMemo, useState } from "react";
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400   3) import {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   4)   Alert,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400   5)   Pressable,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400   6)   ScrollView,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400   7)   StyleSheet,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400   8)   Text,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   9)   TouchableOpacity,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  10)   useWindowDimensions,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  11)   View,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  12) } from "react-native";
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  13) import Svg, {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  14)   Circle,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  15)   Polyline,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  16)   Rect,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  17)   Line as SvgLine,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  18)   Text as SvgText,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  19) } from "react-native-svg";
e43e02c84 (Camden Reed     2025-10-13 17:55:44 -0400  20) import { useWorkouts } from "../../hooks/useWorkouts";
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  21) import { average, total } from "../../utils/calc";
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  22) import { formatDateTime } from "../../utils/date";
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  23) import { fetchDayData, saveWorkout } from "../../utils/firestoreHelpers";
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  24) import { weeklyStreak } from "../../utils/streak";
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400  25) 
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400  26) const ORANGE = "#FF6A00";
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  27) const CHIP_BG = "#151515";
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  28) const CHIP_BG_ACTIVE = "#1E1E1E";
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  29) const GRAY = "#888";
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  30) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  31) type Point = {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  32)   dateISO: string;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  33)   bestWeight: number;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  34)   volume: number;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  35)   avgReps: number;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  36) };
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400  37) 
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400  38) export default function Progress() {
e43e02c84 (Camden Reed     2025-10-13 17:55:44 -0400  39)   const { workouts } = useWorkouts();
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  40)   const { width } = useWindowDimensions();
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  41)   const [tab, setTab] = useState<"Overview" | "Trends">("Overview");
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  42)   const [metric, setMetric] = useState<"weight" | "volume" | "reps">("weight");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  43)   const [cloudStatus, setCloudStatus] = useState("local");
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  44)   const [cloudData, setCloudData] = useState<any>(null);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  45) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  46)   // -------------------
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  47)   // Firestore Sync
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  48)   // -------------------
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  49)   async function syncToCloud() {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  50)     try {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  51)       for (const w of workouts) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  52)         const day = w.dateISO.slice(0, 10);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  53)         for (const ex of w.exercises) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  54)           for (let i = 0; i < ex.sets.length; i++) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  55)             const s = ex.sets[i];
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  56)             await saveWorkout(day, ex.name, i + 1, s.reps, s.weight);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  57)           }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  58)         }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  59)       }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  60)       setCloudStatus("synced");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  61)       Alert.alert("‚úÖ Synced", "Workouts saved to Firestore!");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  62)     } catch (err: any) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  63)       console.error("Sync Error:", err);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  64)       Alert.alert("Error", "Failed to sync workouts.");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  65)       setCloudStatus("error");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  66)     }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  67)   }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  68) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  69)   async function pullFromCloud() {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  70)     try {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  71)       const today = new Date().toISOString().slice(0, 10);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  72)       const data = await fetchDayData(today);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  73)       setCloudData(data);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  74)       setCloudStatus("downloaded");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  75)       Alert.alert("üì• Pulled Data", "Fetched workouts from Firestore!");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  76)     } catch (err: any) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  77)       console.error("Fetch Error:", err);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  78)       Alert.alert("Error", "Failed to fetch from Firestore.");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  79)     }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  80)   }
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  81) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  82)   // -------------------
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400  83)   // Flatten local data
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  84)   // -------------------
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  85)   const allSets = useMemo(() => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400  86)     const rows: any[] = [];
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  87)     for (const w of workouts) {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  88)       for (const ex of w.exercises) {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  89)         for (const s of ex.sets) {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  90)           rows.push({
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  91)             reps: s.reps,
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  92)             weight: s.weight,
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  93)             exercise: ex.name,
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  94)             dateISO: w.dateISO,
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  95)           });
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  96)         }
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  97)       }
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  98)     }
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400  99)     return rows;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 100)   }, [workouts]);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 101) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 102)   // -------------------
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 103)   // Overview metrics
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 104)   // -------------------
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 105)   const totalWorkouts = workouts.length;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 106)   const totalSets = allSets.length;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 107)   const avgReps = totalSets ? average(allSets.map((s) => s.reps)) : 0;
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 108)   const personalBest = totalSets ? Math.max(...allSets.map((s) => s.weight)) : 0;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 109) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 110)   const bestsByExercise = useMemo(() => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 111)     const map = new Map<string, { weight: number; date: string }>();
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 112)     for (const s of allSets) {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 113)       if (!map.has(s.exercise) || s.weight > map.get(s.exercise)!.weight) {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 114)         map.set(s.exercise, { weight: s.weight, date: s.dateISO });
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 115)       }
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 116)     }
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 117)     return Array.from(map.entries()).map(([exercise, info]) => ({
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 118)       exercise,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 119)       ...info,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 120)     }));
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 121)   }, [allSets]);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 122) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 123)   const weeklyGoal = 4;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 124)   const streak = weeklyStreak(workouts, weeklyGoal);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 125) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 126)   const avgGap = useMemo(() => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 127)     if (workouts.length < 2) return 0;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 128)     const times = workouts
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 129)       .map((w) => new Date(w.dateISO).getTime())
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 130)       .sort((a, b) => a - b);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 131)     const diffs = [];
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 132)     for (let i = 1; i < times.length; i++)
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 133)       diffs.push((times[i] - times[i - 1]) / (1000 * 60 * 60 * 24));
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 134)     return average(diffs);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 135)   }, [workouts]);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 136) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 137)   const weekdayStats = useMemo(() => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 138)     const counts = Array(7).fill(0);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 139)     workouts.forEach((w) => counts[new Date(w.dateISO).getDay()]++);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 140)     return counts;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 141)   }, [workouts]);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 142) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 143)   // -------------------
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 144)   // Trends (Exercise Picker)
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 145)   // -------------------
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 146)   const exerciseNames = useMemo(() => {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 147)     const set = new Set<string>();
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 148)     workouts.forEach((w) => w.exercises.forEach((ex) => set.add(ex.name)));
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 149)     return Array.from(set).sort();
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 150)   }, [workouts]);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 151) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 152)   const [exercise, setExercise] = useState<string>(exerciseNames[0] ?? "");
e43e02c84 (Camden Reed     2025-10-13 17:55:44 -0400 153) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 154)   const series: Point[] = useMemo(() => {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 155)     if (!exercise) return [];
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 156)     return workouts
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 157)       .map((w) => {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 158)         const exMatches = w.exercises.filter((e) => e.name === exercise);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 159)         if (!exMatches.length) return null;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 160)         const sets = exMatches.flatMap((e) => e.sets);
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 161)         const bestWeight = Math.max(...sets.map((s) => s.weight), 0);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 162)         const volume = total(sets.map((s) => s.reps * s.weight));
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 163)         const avgReps = average(sets.map((s) => s.reps));
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 164)         return { dateISO: w.dateISO, bestWeight, volume, avgReps };
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 165)       })
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 166)       .filter(Boolean) as Point[];
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 167)   }, [workouts, exercise]);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 168) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 169)   const maxVal =
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 170)     metric === "weight"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 171)       ? Math.max(...series.map((p) => p.bestWeight), 0)
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 172)       : metric === "volume"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 173)       ? Math.max(...series.map((p) => p.volume), 0)
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 174)       : Math.max(...series.map((p) => p.avgReps), 0);
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 175) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 176)   // -------------------
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 177)   // Render
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 178)   // -------------------
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 179)   return (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 180)     <ScrollView
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 181)       style={styles.container}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 182)       contentContainerStyle={{ paddingBottom: 40 }}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 183)     >
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 184)       <Text style={styles.header}>Progress</Text>
e43e02c84 (Camden Reed     2025-10-13 17:55:44 -0400 185) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 186)       {/* Cloud Sync Status */}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 187)       <View style={styles.syncBadge}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 188)         <View
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 189)           style={[
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 190)             styles.dot,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 191)             {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 192)               backgroundColor:
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 193)                 cloudStatus === "synced"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 194)                   ? "#4CAF50"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 195)                   : cloudStatus === "error"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 196)                   ? "#F44336"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 197)                   : cloudStatus === "downloaded"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 198)                   ? "#2196F3"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 199)                   : "#AAA",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 200)             },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 201)           ]}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 202)         />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 203)         <Text style={styles.syncText}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 204)           {cloudStatus === "synced"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 205)             ? "Cloud Synced"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 206)             : cloudStatus === "downloaded"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 207)             ? "Data Pulled"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 208)             : "Local Data"}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 209)         </Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 210)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 211) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 212)       {/* Cloud Buttons */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 213)       <View style={{ flexDirection: "row", marginBottom: 12 }}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 214)         <TouchableOpacity style={styles.syncButton} onPress={syncToCloud}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 215)           <Text style={styles.syncButtonText}>Sync ‚Üí Cloud</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 216)         </TouchableOpacity>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 217)         <TouchableOpacity style={styles.syncButton} onPress={pullFromCloud}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 218)           <Text style={styles.syncButtonText}>Pull ‚Üê Cloud</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 219)         </TouchableOpacity>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 220)       </View>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 221) 
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 222)       {/* Tabs */}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 223)       <View style={styles.tabRow}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 224)         <TabChip
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 225)           label="Overview"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 226)           active={tab === "Overview"}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 227)           onPress={() => setTab("Overview")}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 228)         />
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 229)         <TabChip
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 230)           label="Trends"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 231)           active={tab === "Trends"}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 232)           onPress={() => setTab("Trends")}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 233)         />
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 234)       </View>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 235) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 236)       {tab === "Overview" ? (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 237)         <>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 238)           <View style={styles.card}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 239)             <Text style={styles.cardTitle}>Consistency</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 240)             <Text style={styles.item}>Weekly Goal: {weeklyGoal} workouts</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 241)             <Text style={styles.item}>Current Streak: {streak} weeks üî•</Text>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 242)             {avgGap > 0 && (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 243)               <Text style={styles.item}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 244)                 Avg gap between workouts: {avgGap.toFixed(1)} days
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 245)               </Text>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 246)             )}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 247)           </View>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 248) 
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 249)           <View style={styles.card}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 250)             <Text style={styles.cardTitle}>Personal Bests</Text>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 251)             {bestsByExercise.length === 0 ? (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 252)               <Text style={styles.item}>No data yet</Text>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 253)             ) : (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 254)               bestsByExercise.map((b, i) => (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 255)                 <Text key={i} style={styles.item}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 256)                   {b.exercise}: {b.weight} lb ({formatDateTime(b.date)})
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 257)                 </Text>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 258)               ))
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 259)             )}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 260)           </View>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 261) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 262)           <View style={styles.card}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 263)             <Text style={styles.cardTitle}>Most Active Days</Text>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 264)             <Svg width={width - 80} height={120}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 265)               {weekdayStats.map((count, i) => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 266)                 const max = Math.max(...weekdayStats);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 267)                 const h = max ? (count / max) * 100 : 0;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 268)                 const barX = 20 + i * 40;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 269)                 const dayLabels = ["S", "M", "T", "W", "T", "F", "S"];
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 270)                 return (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 271)                   <React.Fragment key={i}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 272)                     <Rect
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 273)                       x={barX}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 274)                       y={110 - h}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 275)                       width={20}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 276)                       height={h}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 277)                       fill={ORANGE}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 278)                       rx={4}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 279)                     />
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 280)                     <SvgText
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 281)                       x={barX + 10}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 282)                       y={115}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 283)                       fill={GRAY}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 284)                       fontSize="10"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 285)                       textAnchor="middle"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 286)                     >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 287)                       {dayLabels[i]}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 288)                     </SvgText>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 289)                   </React.Fragment>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 290)                 );
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 291)               })}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 292)             </Svg>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 293)           </View>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 294)         </>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 295)       ) : (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 296)         <>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 297)           {/* Exercise Picker */}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 298)           <View style={styles.card}>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 299)             <Text style={styles.cardTitle}>Select Exercise</Text>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 300)             <ScrollView
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 301)               horizontal
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 302)               showsHorizontalScrollIndicator={false}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 303)               style={{ marginTop: 6 }}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 304)             >
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 305)               {exerciseNames.map((name) => (
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 306)                 <Pressable
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 307)                   key={name}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 308)                   onPress={() => setExercise(name)}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 309)                   style={[
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 310)                     styles.chip,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 311)                     {
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 312)                       backgroundColor:
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 313)                         exercise === name ? CHIP_BG_ACTIVE : CHIP_BG,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 314)                       borderColor: exercise === name ? ORANGE : "#222",
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 315)                     },
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 316)                   ]}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 317)                 >
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 318)                   <Text
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 319)                     style={[
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 320)                       styles.chipText,
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 321)                       { color: exercise === name ? ORANGE : "#ddd" },
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 322)                     ]}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 323)                   >
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 324)                     {name}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 325)                   </Text>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 326)                 </Pressable>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 327)               ))}
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 328)             </ScrollView>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 329)           </View>
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 330) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 331)           {/* Metric Toggle */}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 332)           <View
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 333)             style={[
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 334)               styles.card,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 335)               { flexDirection: "row", justifyContent: "space-around" },
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 336)             ]}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 337)           >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 338)             {["weight", "volume", "reps"].map((m) => (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 339)               <Pressable
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 340)                 key={m}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 341)                 onPress={() => setMetric(m as any)}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 342)                 style={[
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 343)                   styles.chip,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 344)                   {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 345)                     backgroundColor:
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 346)                       metric === m ? CHIP_BG_ACTIVE : CHIP_BG,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 347)                     borderColor: metric === m ? ORANGE : "#222",
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 348)                   },
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 349)                 ]}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 350)               >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 351)                 <Text
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 352)                   style={[
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 353)                     styles.chipText,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 354)                     { color: metric === m ? ORANGE : "#ddd" },
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 355)                   ]}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 356)                 >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 357)                   {m === "weight"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 358)                     ? "Best Weight"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 359)                     : m === "volume"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 360)                     ? "Volume"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 361)                     : "Reps"}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 362)                 </Text>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 363)               </Pressable>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 364)             ))}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 365)           </View>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 366) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 367)           {/* Graph */}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 368)           <View style={styles.card}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 369)             <Text style={styles.cardTitle}>
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 370)               Progress Over Time ({metric})
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 371)             </Text>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 372)             {series.length < 2 ? (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 373)               <Text style={styles.item}>Not enough data yet</Text>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 374)             ) : (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 375)               <LineChart
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 376)                 data={series.map((p) => ({
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 377)                   x: new Date(p.dateISO).getTime(),
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 378)                   y:
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 379)                     metric === "weight"
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 380)                       ? p.bestWeight
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 381)                       : metric === "volume"
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 382)                       ? p.volume
ca7b4e86c (Ryan Grychowski 2025-10-28 16:22:11 -0400 383)                       : p.avgReps,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 384)                 }))}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 385)                 width={Math.max(260, width - 40)}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 386)                 height={260}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 387)                 color={ORANGE}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 388)                 metric={metric}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 389)               />
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 390)             )}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 391)           </View>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 392)         </>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 393)       )}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 394)     </ScrollView>
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 395)   );
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 396) }
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 397) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 398) // ----------------- Components -----------------
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 399) function TabChip({ label, active, onPress }: any) {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 400)   return (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 401)     <Pressable
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 402)       onPress={onPress}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 403)       style={[
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 404)         styles.tabChip,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 405)         {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 406)           backgroundColor: active ? CHIP_BG_ACTIVE : CHIP_BG,
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 407)           borderColor: active ? ORANGE : "#222",
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 408)         },
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 409)       ]}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 410)     >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 411)       <Text
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 412)         style={[styles.tabChipText, { color: active ? ORANGE : "#ddd" }]}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 413)       >
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 414)         {label}
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 415)       </Text>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 416)     </Pressable>
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 417)   );
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 418) }
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 419) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 420) function LineChart({ data, width, height, color, metric }: any) {
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 421)   const sorted = [...data].sort((a, b) => a.x - b.x);
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 422)   const pad = 40;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 423)   const cw = width - pad * 2;
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 424)   const ch = height - pad * 2;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 425)   const minX = sorted[0].x;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 426)   const maxX = sorted[sorted.length - 1].x;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 427)   const minY = 0;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 428)   const maxY = Math.max(...sorted.map((p) => p.y));
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 429)   const mapX = (x: number) => pad + ((x - minX) / Math.max(1, maxX - minX)) * cw;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 430)   const mapY = (y: number) => pad + ch - ((y - minY) / Math.max(1, maxY - minY)) * ch;
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 431)   const points = sorted.map((p) => `${mapX(p.x)},${mapY(p.y)}`).join(" ");
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 432)   const tickCount = 4;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 433)   const tickValues = Array.from({ length: tickCount + 1 }, (_, i) => Math.round((maxY / tickCount) * i));
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 434) 
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 435)   return (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 436)     <Svg width={width} height={height}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 437)       <SvgLine x1={pad} y1={pad} x2={pad} y2={height - pad} stroke="#444" strokeWidth={1} />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 438)       <SvgLine x1={pad} y1={height - pad} x2={width - pad} y2={height - pad} stroke="#444" strokeWidth={1} />
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 439)       {tickValues.map((val, i) => {
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 440)         const y = mapY(val);
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 441)         return (
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 442)           <React.Fragment key={i}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 443)             <SvgLine x1={pad - 5} y1={y} x2={width - pad} y2={y} stroke="#222" strokeWidth={0.5} />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 444)             <SvgText x={pad - 8} y={y + 3} fill="#888" fontSize="10" textAnchor="end">
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 445)               {val}
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 446)             </SvgText>
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 447)           </React.Fragment>
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 448)         );
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 449)       })}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 450)       {[sorted[0], sorted[Math.floor(sorted.length / 2)], sorted.at(-1)].map((p, i) =>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 451)         p ? (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 452)           <SvgText
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 453)             key={i}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 454)             x={mapX(p.x)}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 455)             y={height - pad + 15}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 456)             fill="#888"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 457)             fontSize="10"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 458)             textAnchor="middle"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 459)           >
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 460)             {new Date(p.x).toLocaleDateString(undefined, { month: "short", day: "numeric" })}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 461)           </SvgText>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 462)         ) : null
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 463)       )}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 464)       <Polyline points={points} fill="none" stroke={color} strokeWidth={2} />
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 465)       {sorted.map((p, i) => (
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 466)         <Circle key={i} cx={mapX(p.x)} cy={mapY(p.y)} r={3} fill={color} />
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 467)       ))}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 468)       <SvgText x={pad - 30} y={pad - 10} fill="#aaa" fontSize="12" textAnchor="start">
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 469)         {metric === "weight" ? "Weight (lb)" : metric === "volume" ? "Volume" : "Reps"}
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 470)       </SvgText>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 471)       <SvgText x={width / 2} y={height - 5} fill="#aaa" fontSize="12" textAnchor="middle">
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 472)         Date
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 473)       </SvgText>
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 474)     </Svg>
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 475)   );
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 476) }
32e57314b (Camden Reed     2025-10-13 18:13:57 -0400 477) 
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 478) // ----------------- Styles -----------------
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 479) const styles = StyleSheet.create({
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 480)   container: { flex: 1, backgroundColor: "#000", padding: 20 },
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 481)   header: { color: "#fff", fontSize: 28, fontWeight: "800", marginBottom: 12 },
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 482)   tabRow: { flexDirection: "row", marginBottom: 12 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 483)   tabChip: { paddingVertical: 8, paddingHorizontal: 14, borderRadius: 999, marginRight: 8, borderWidth: 1 },
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 484)   tabChipText: { fontSize: 13, fontWeight: "700" },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 485)   chip: { paddingVertical: 6, paddingHorizontal: 12, borderRadius: 999, marginRight: 8, borderWidth: 1 },
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 486)   chipText: { fontSize: 13, fontWeight: "600" },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 487)   card: { backgroundColor: "#111", padding: 16, borderRadius: 14, borderWidth: 1, borderColor: "#1f1f1f", marginBottom: 16 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 488)   cardTitle: { color: ORANGE, fontWeight: "800", marginBottom: 8, fontSize: 18 },
1ee80255a (Ryan Grychowski 2025-10-13 21:54:51 -0400 489)   item: { color: "#eee", marginTop: 4, fontSize: 14 },
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 490)   syncBadge: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 491)   dot: { width: 8, height: 8, borderRadius: 4, marginRight: 6 },
bbfb9ef98 (Ryan Grychowski 2025-10-27 21:02:42 -0400 492)   syncText: { color: "#aaa", fontSize: 12 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 493)   syncButton: { backgroundColor: "#222", padding: 10, borderRadius: 8, marginRight: 10, borderWidth: 1, borderColor: "#444" },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 494)   syncButtonText: { color: ORANGE, fontWeight: "700" },
2a1f7583e (Camden Reed     2025-09-23 09:22:49 -0400 495) });

09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   1) // app/profile.tsx
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   2) import React, { useEffect, useState } from "react";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   3) import {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   4)   View,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   5)   Text,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   6)   TextInput,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   7)   TouchableOpacity,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   8)   StyleSheet,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400   9)   ScrollView,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  10)   Alert,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  11)   ActivityIndicator,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  12) } from "react-native";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  13) import { useRouter } from "expo-router";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  14) import { auth, db } from "../../firebase";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  15) import { doc, getDoc, setDoc } from "firebase/firestore";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  16) import { Ionicons } from "@expo/vector-icons";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  17) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  18) const ORANGE = "#FF6A00";
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  19) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  20) export default function Profile() {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  21)   const [profile, setProfile] = useState<any>(null);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  22)   const [loading, setLoading] = useState(true);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  23)   const [editMode, setEditMode] = useState(false);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  24)   const router = useRouter();
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  25) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  26)   useEffect(() => {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  27)     const fetchProfile = async () => {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  28)       try {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  29)         const user = auth.currentUser;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  30)         if (!user) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  31)           Alert.alert("Error", "You must be logged in to view your profile.");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  32)           return;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  33)         }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  34) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  35)         const docRef = doc(db, "users", user.uid);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  36)         const docSnap = await getDoc(docRef);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  37) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  38)         if (docSnap.exists()) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  39)           setProfile(docSnap.data());
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  40)         } else {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  41)           setProfile({
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  42)             name: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  43)             email: user.email || "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  44)             height: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  45)             weightLb: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  46)             age: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  47)             gender: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  48)             nutrition: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  49)               target: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  50)                 kcal: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  51)                 protein: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  52)                 fats: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  53)                 carbs: "",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  54)               },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  55)               current: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  56)                 kcal: 0,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  57)                 protein: 0,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  58)                 fats: 0,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  59)                 carbs: 0,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  60)               },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  61)             },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  62)           });
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  63)         }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  64)       } catch (error) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  65)         console.error("Error loading profile:", error);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  66)         Alert.alert("Error", "Failed to load profile data.");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  67)       } finally {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  68)         setLoading(false);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  69)       }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  70)     };
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  71) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  72)     fetchProfile();
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  73)   }, []);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  74) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  75)   const handleSave = async () => {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  76)     try {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  77)       const user = auth.currentUser;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  78)       if (!user) return;
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  79) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  80)       const docRef = doc(db, "users", user.uid);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  81)       await setDoc(docRef, profile, { merge: true });
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  82) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  83)       setEditMode(false);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  84)       Alert.alert("‚úÖ Success", "Profile updated successfully!");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  85)     } catch (error) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  86)       console.error("Error updating profile:", error);
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  87)       Alert.alert("‚ùå Error", "Failed to save profile.");
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  88)     }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  89)   };
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  90) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  91)   if (loading) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  92)     return (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  93)       <View style={styles.centered}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  94)         <ActivityIndicator size="large" color={ORANGE} />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  95)         <Text style={{ color: "#fff", marginTop: 10 }}>Loading profile...</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  96)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  97)     );
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  98)   }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400  99) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 100)   if (!profile) {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 101)     return (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 102)       <View style={styles.centered}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 103)         <Text style={styles.error}>No profile data found.</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 104)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 105)     );
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 106)   }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 107) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 108)   return (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 109)     <ScrollView contentContainerStyle={styles.container}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 110)       {/* Header */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 111)       <View style={styles.header}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 112)         <TouchableOpacity onPress={() => router.back()}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 113)           <Ionicons name="arrow-back" size={26} color="#fff" />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 114)         </TouchableOpacity>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 115)         <Text style={styles.headerTitle}>Profile</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 116)         <View style={{ width: 26 }} /> {/* Spacer to center title */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 117)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 118) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 119)       {/* Basic Info */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 120)       <View style={styles.card}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 121)         <Text style={styles.sectionTitle}>Basic Info</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 122)         {["name", "email", "height", "weightLb", "age", "gender"].map((key) => (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 123)           <View key={key} style={styles.field}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 124)             <Text style={styles.label}>{key}</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 125)             {editMode ? (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 126)               <TextInput
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 127)                 style={styles.input}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 128)                 value={String(profile[key] || "")}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 129)                 editable={key !== "email"} // Don‚Äôt allow editing email
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 130)                 onChangeText={(text) =>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 131)                   setProfile((prev: any) => ({ ...prev, [key]: text }))
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 132)                 }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 133)               />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 134)             ) : (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 135)               <Text style={styles.value}>{String(profile[key] || "-")}</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 136)             )}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 137)           </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 138)         ))}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 139)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 140) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 141)       {/* Nutrition Targets */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 142)       <View style={styles.card}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 143)         <Text style={styles.sectionTitle}>Nutrition Targets</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 144)         {Object.entries(profile.nutrition.target).map(([key, val]) => (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 145)           <View key={key} style={styles.field}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 146)             <Text style={styles.label}>{key}</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 147)             {editMode ? (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 148)               <TextInput
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 149)                 style={styles.input}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 150)                 value={String(val)}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 151)                 keyboardType="numeric"
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 152)                 onChangeText={(text) =>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 153)                   setProfile((prev: any) => ({
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 154)                     ...prev,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 155)                     nutrition: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 156)                       ...prev.nutrition,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 157)                       target: { ...prev.nutrition.target, [key]: text },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 158)                     },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 159)                   }))
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 160)                 }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 161)               />
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 162)             ) : (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 163)               <Text style={styles.value}>{String(val)}</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 164)             )}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 165)           </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 166)         ))}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 167)       </View>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 168) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 169)       {/* Buttons */}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 170)       <TouchableOpacity
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 171)         style={styles.button}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 172)         onPress={editMode ? handleSave : () => setEditMode(true)}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 173)       >
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 174)         <Text style={styles.buttonText}>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 175)           {editMode ? "Save Changes" : "Edit Profile"}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 176)         </Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 177)       </TouchableOpacity>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 178) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 179)       {editMode && (
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 180)         <TouchableOpacity
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 181)           style={[styles.button, styles.cancelButton]}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 182)           onPress={() => setEditMode(false)}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 183)         >
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 184)           <Text style={styles.buttonText}>Cancel</Text>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 185)         </TouchableOpacity>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 186)       )}
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 187)     </ScrollView>
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 188)   );
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 189) }
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 190) 
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 191) const styles = StyleSheet.create({
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 192)   container: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 193)     flexGrow: 1,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 194)     backgroundColor: "#000",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 195)     padding: 20,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 196)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 197)   header: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 198)     flexDirection: "row",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 199)     justifyContent: "space-between",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 200)     alignItems: "center",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 201)     marginBottom: 20,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 202)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 203)   headerTitle: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 204)     color: "#fff",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 205)     fontSize: 24,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 206)     fontWeight: "bold",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 207)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 208)   centered: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 209)     flex: 1,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 210)     backgroundColor: "#000",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 211)     justifyContent: "center",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 212)     alignItems: "center",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 213)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 214)   sectionTitle: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 215)     color: ORANGE,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 216)     fontWeight: "bold",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 217)     fontSize: 18,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 218)     marginBottom: 8,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 219)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 220)   card: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 221)     backgroundColor: "#111",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 222)     padding: 16,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 223)     borderRadius: 12,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 224)     borderWidth: 1,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 225)     borderColor: "#1f1f1f",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 226)     marginBottom: 20,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 227)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 228)   field: { marginBottom: 14 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 229)   label: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 230)     color: "#aaa",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 231)     marginBottom: 4,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 232)     textTransform: "capitalize",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 233)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 234)   value: { color: "#fff", fontSize: 16 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 235)   input: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 236)     backgroundColor: "#222",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 237)     color: "#fff",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 238)     borderRadius: 8,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 239)     borderWidth: 1,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 240)     borderColor: "#333",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 241)     padding: 10,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 242)     fontSize: 16,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 243)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 244)   button: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 245)     backgroundColor: ORANGE,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 246)     borderRadius: 10,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 247)     padding: 14,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 248)     alignItems: "center",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 249)     marginBottom: 10,
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 250)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 251)   cancelButton: {
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 252)     backgroundColor: "#444",
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 253)   },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 254)   buttonText: { color: "#fff", fontWeight: "bold", fontSize: 16 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 255)   error: { color: "red", fontSize: 18 },
09bf097e8 (Ryan Grychowski 2025-10-27 22:34:29 -0400 256) });
