43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // hooks/useNow.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) import { useState, useEffect } from "react";
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4) export function useNow(intervalMs = 1000) {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5)   const [now, setNow] = useState<Date>(new Date());
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7)   useEffect(() => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8)     const id = setInterval(() => setNow(new Date()), intervalMs);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9)     return () => clearInterval(id);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10)   }, [intervalMs]);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 11) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 12)   return now;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 13) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 14) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // hooks/useWorkouts.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) import { useState } from "react";
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4) export type SetItem = { id: string; reps: number; weight: number };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5) export type Exercise = { id: string; name: string; sets: SetItem[] };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6) export type Workout = { id: string; dateISO: string; exercises: Exercise[] };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8) export function useWorkouts() {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9)   const [workouts, setWorkouts] = useState<Workout[]>([]);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 11)   const addWorkout = (): void => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 12)     const w: Workout = {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 13)       id: String(Date.now()),
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 14)       dateISO: new Date().toISOString(),
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 15)       exercises: [],
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 16)     };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 17)     setWorkouts((prev) => [w, ...prev]);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 18)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 19) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 20)   const addExercise = (workoutId: string, name: string): void => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 21)     setWorkouts((prev) =>
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 22)       prev.map((w) =>
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 23)         w.id === workoutId
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 24)           ? {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 25)               ...w,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 26)               exercises: [
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 27)                 ...w.exercises,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 28)                 { id: `${workoutId}-${Date.now()}`, name, sets: [] },
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 29)               ],
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 30)             }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 31)           : w
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 32)       )
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 33)     );
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 34)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 35) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 36)   const addSet = (
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 37)     workoutId: string,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 38)     exerciseId: string,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 39)     reps: number,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 40)     weight: number
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 41)   ): void => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 42)     setWorkouts((prev) =>
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 43)       prev.map((w) =>
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 44)         w.id === workoutId
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 45)           ? {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 46)               ...w,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 47)               exercises: w.exercises.map((ex) =>
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 48)                 ex.id === exerciseId
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 49)                   ? {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 50)                       ...ex,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 51)                       sets: [
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 52)                         ...ex.sets,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 53)                         { id: `${exerciseId}-${Date.now()}`, reps, weight },
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 54)                       ],
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 55)                     }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 56)                   : ex
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 57)               ),
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 58)             }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 59)           : w
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 60)       )
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 61)     );
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 62)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 63) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 64)   return { workouts, addWorkout, addExercise, addSet };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 65) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 66) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // hooks/useProgress.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) import { Workout } from "./useWorkouts";
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3) import { Meal } from "./useNutrition";
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5) export function useProgress(workouts: Workout[], meals: Meal[]) {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6)   const totalWorkouts = workouts.length;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8)   const weeklyWorkouts = workouts.filter((w) => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9)     const dt = new Date(w.dateISO);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10)     const now = new Date();
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 11)     const diffDays = (now.getTime() - dt.getTime()) / (1000 * 60 * 60 * 24);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 12)     return diffDays <= 7;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 13)   });
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 14) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 15)   const avgCalories =
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 16)     meals.length > 0
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 17)       ? Math.round(meals.reduce((sum, m) => sum + m.calories, 0) / meals.length)
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 18)       : 0;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 19) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 20)   return {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 21)     totalWorkouts,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 22)     weeklyWorkouts: weeklyWorkouts.length,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 23)     avgCalories,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 24)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 25) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 26) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // hooks/useNutrition.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) import { useState } from "react";
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4) export type Meal = { id: string; name: string; calories: number };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5) export type NutritionTargets = { calories: number; protein: number; carbs: number; fats: number };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7) export function useNutrition() {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8)   const [targets, setTargets] = useState<NutritionTargets>({
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9)     calories: 2200,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10)     protein: 160,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 11)     carbs: 220,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 12)     fats: 70,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 13)   });
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 14) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 15)   const [meals, setMeals] = useState<Meal[]>([]);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 16) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 17)   const addMeal = (name: string, calories: number): void => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 18)     setMeals((prev) => [
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 19)       ...prev,
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 20)       { id: String(Date.now()), name, calories },
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 21)     ]);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 22)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 23) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 24)   const updateTargets = (newTargets: Partial<NutritionTargets>): void => {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 25)     setTargets((prev) => ({ ...prev, ...newTargets }));
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 26)   };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 27) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 28)   return { targets, meals, addMeal, updateTargets };
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 29) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 30) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // utils/date.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) export function formatDateTime(dateISO: string) {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3)   const dt = new Date(dateISO);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4)   const datePart = dt.toLocaleDateString(undefined, {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5)     month: "short",
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6)     day: "numeric",
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7)     year: "numeric",
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8)   });
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9)   const timePart = dt.toLocaleTimeString(undefined, {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10)     hour: "numeric",
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 11)     minute: "2-digit",
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 12)   });
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 13)   return `${datePart}  ${timePart}`;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 14) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 15) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 16) export function formatRelativeTime(dateISO: string) {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 17)   const dt = new Date(dateISO);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 18)   const now = new Date();
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 19)   const diff = (now.getTime() - dt.getTime()) / 1000; // seconds
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 20) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 21)   if (diff < 60) return `${Math.floor(diff)}s ago`;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 22)   if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 23)   if (diff < 86400) return `${Math.floor(diff / 3600)}h ago`;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 24)   return `${Math.floor(diff / 86400)}d ago`;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 25) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 26) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  1) // utils/calc.ts
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  2) export function average(numbers: number[]): number {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  3)   if (numbers.length === 0) return 0;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  4)   return numbers.reduce((sum, n) => sum + n, 0) / numbers.length;
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  5) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  6) 
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  7) export function total(numbers: number[]): number {
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  8)   return numbers.reduce((sum, n) => sum + n, 0);
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400  9) }
43b0c9020 (Ryan Grychowski 2025-09-26 10:18:41 -0400 10) 
