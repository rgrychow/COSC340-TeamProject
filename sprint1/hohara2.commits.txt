NutritionAPITemp macro.cjs

    Code was written in a local terminal then transferred to the group repository

(hohara29          2025-09-29 23:42:41 -0400  1) // macro.cjs (CommonJS)
(hohara29          2025-09-29 23:42:41 -0400  2) const path = require('node:path');
(hohara29          2025-09-29 23:42:41 -0400  3) const fs = require('node:fs');
(hohara29          2025-09-29 23:42:41 -0400  4) require('dotenv').config({ path: path.join(__dirname, '.env') });
(hohara29          2025-09-29 23:42:41 -0400  5) 
(hohara29          2025-09-29 23:42:41 -0400  7) const envPath = path.join(__dirname, '.env');
(hohara29          2025-09-29 23:42:41 -0400  8) if (!fs.existsSync(envPath)) {
(hohara29          2025-09-29 23:42:41 -0400  9)   console.error('Did not find .env at:', envPath);
(hohara29          2025-09-29 23:42:41 -0400 10)   process.exit(1);
(hohara29          2025-09-29 23:42:41 -0400 11) }
(hohara29          2025-09-29 23:42:41 -0400 12) 
(hohara29          2025-09-29 23:42:41 -0400 13) const USDA_KEY = process.env.USDA_API_KEY;
(hohara29          2025-09-29 23:42:41 -0400 14) if (!USDA_KEY) {
(hohara29          2025-09-29 23:42:41 -0400 15)   console.error('USDA_API_KEY not found in .env at:', envPath);
(hohara29          2025-09-29 23:42:41 -0400 16)   console.error('Example line (no quotes, no spaces):');
(hohara29          2025-09-29 23:42:41 -0400 17)   console.error('USDA_API_KEY=YOUR_REAL_FDC_KEY');
(hohara29          2025-09-29 23:42:41 -0400 18)   process.exit(1);
(hohara29          2025-09-29 23:42:41 -0400 19) }
(hohara29          2025-09-29 23:42:41 -0400 20) 
(hohara29          2025-09-29 23:42:41 -0400 21) 
(hohara29          2025-09-29 23:42:41 -0400 22) // USDA nutrient numbers we care about
(hohara29          2025-09-29 23:42:41 -0400 23) const NUM = { kcal: '208', protein: '203', carbs: '205', fat: '204' };
(hohara29          2025-09-29 23:42:41 -0400 24) 
(hohara29          2025-09-29 23:42:41 -0400 25) function pickUSDA(nutrients) {
(hohara29          2025-09-29 23:42:41 -0400 26)   const out = { kcal: 0, protein_g: 0, carbs_g: 0, fat_g: 0 };
(hohara29          2025-09-29 23:42:41 -0400 27)   for (const n of nutrients || []) {
(hohara29          2025-09-29 23:42:41 -0400 28)     const number = n?.nutrient?.number || n?.number;
(hohara29          2025-09-29 23:42:41 -0400 29)     const amount = n?.amount ?? n?.value ?? 0;
(hohara29          2025-09-29 23:42:41 -0400 30)     if (number === NUM.kcal) out.kcal = amount;
(hohara29          2025-09-29 23:42:41 -0400 31)     if (number === NUM.protein) out.protein_g = amount;
(hohara29          2025-09-29 23:42:41 -0400 32)     if (number === NUM.carbs) out.carbs_g = amount;
(hohara29          2025-09-29 23:42:41 -0400 33)     if (number === NUM.fat) out.fat_g = amount;
1(hohara29          2025-09-29 23:42:41 -0400 34)   }
(hohara29          2025-09-29 23:42:41 -0400 35)   return out;
(hohara29          2025-09-29 23:42:41 -0400 36) }
(hohara29          2025-09-29 23:42:41 -0400 37) 
  (hohara29          2025-09-29 23:42:41 -0400 38) function r1(x) { return Math.round(x * 10) / 10; }
(hohara29          2025-09-29 23:42:41 -0400 39) 
(hohara29          2025-09-29 23:42:41 -0400 40) async function run() {
(hohara29          2025-09-29 23:42:41 -0400 41)   const query = process.argv.slice(2).join(' ').trim();
(hohara29          2025-09-29 23:42:41 -0400 42)   if (!query) {
(hohara29          2025-09-29 23:42:41 -0400 43)     console.log('Usage: node macro.js "chicken breast"');
(hohara29          2025-09-29 23:42:41 -0400 44)     process.exit(0);
(hohara29          2025-09-29 23:42:41 -0400 45)   }
(hohara29          2025-09-29 23:42:41 -0400 46) 
(hohara29          2025-09-29 23:42:41 -0400 47)   // 1) Search for the top match
(hohara29          2025-09-29 23:42:41 -0400 48)   const s = new URL('https://api.nal.usda.gov/fdc/v1/foods/search');
(hohara29          2025-09-29 23:42:41 -0400 49)   s.searchParams.set('query', query);
(hohara29          2025-09-29 23:42:41 -0400 50)   s.searchParams.set('pageSize', '1');
(hohara29          2025-09-29 23:42:41 -0400 51)   s.searchParams.set('api_key', USDA_KEY);
(hohara29          2025-09-29 23:42:41 -0400 52) 
(hohara29          2025-09-29 23:42:41 -0400 53)   const rs = await fetch(s);
(hohara29          2025-09-29 23:42:41 -0400 54)   if (!rs.ok) throw new Error(`USDA search ${rs.status}`);
(hohara29          2025-09-29 23:42:41 -0400 55)   const js = await rs.json();
(hohara29          2025-09-29 23:42:41 -0400 56)   if (!js.foods?.length) throw new Error('No USDA results');
(hohara29          2025-09-29 23:42:41 -0400 57) 
(hohara29          2025-09-29 23:42:41 -0400 58)   const first = js.foods[0];
(hohara29          2025-09-29 23:42:41 -0400 59) 
(hohara29          2025-09-29 23:42:41 -0400 60)   // 2) Get detail → nutrients + serving options
(hohara29          2025-09-29 23:42:41 -0400 61)   const rd = await fetch(`https://api.nal.usda.gov/fdc/v1/food/${first.fdcId}?api_key=${USDA_KEY}`);
(hohara29          2025-09-29 23:42:41 -0400 62)   if (!rd.ok) throw new Error(`USDA detail ${rd.status}`);
(hohara29          2025-09-29 23:42:41 -0400 63)   const detail = await rd.json();
(hohara29          2025-09-29 23:42:41 -0400 64) 
(hohara29          2025-09-29 23:42:41 -0400 65)   // Base macros per 100 g
(hohara29          2025-09-29 23:42:41 -0400 66)   const per100 = pickUSDA(detail.foodNutrients);
(hohara29          2025-09-29 23:42:41 -0400 67) 
(hohara29          2025-09-29 23:42:41 -0400 68)   // Prefer a real serving if USDA provides gramWeight; otherwise use 100 g
(hohara29          2025-09-29 23:42:41 -0400 69)   let label = 'per 100 g';
(hohara29          2025-09-29 23:42:41 -0400 70)   let macros = per100;
(hohara29          2025-09-29 23:42:41 -0400 71)   if (detail.foodPortions?.length) {
(hohara29          2025-09-29 23:42:41 -0400 72)     const p = detail.foodPortions.find(x => x.gramWeight) || detail.foodPortions[0];
(hohara29          2025-09-29 23:42:41 -0400 73)     if (p?.gramWeight) {
(hohara29          2025-09-29 23:42:41 -0400 74)       const g = p.gramWeight;
(hohara29          2025-09-29 23:42:41 -0400 75)       label = `per serving (${p.portionDescription || p.modifier || 'serving'} = ${g} g)`;
(hohara29          2025-09-29 23:42:41 -0400 76)       macros = {
(hohara29          2025-09-29 23:42:41 -0400 77)         kcal: (per100.kcal * g) / 100,
(hohara29          2025-09-29 23:42:41 -0400 78)         protein_g: (per100.protein_g * g) / 100,
(hohara29          2025-09-29 23:42:41 -0400 79)         carbs_g: (per100.carbs_g * g) / 100,
(hohara29          2025-09-29 23:42:41 -0400 80)         fat_g: (per100.fat_g * g) / 100,
(hohara29          2025-09-29 23:42:41 -0400 81)       };
(hohara29          2025-09-29 23:42:41 -0400 82)     }
(hohara29          2025-09-29 23:42:41 -0400 83)   }
(hohara29          2025-09-29 23:42:41 -0400 84) 
(hohara29          2025-09-29 23:42:41 -0400 85)   const title = `${detail.description}${detail.brandOwner ? ' — ' + detail.brandOwner : ''}`;
(hohara29          2025-09-29 23:42:41 -0400 86)   console.log(`\n${title}\n  ${label}`);
(hohara29          2025-09-29 23:42:41 -0400 87)   console.log(`  kcal: ${r1(macros.kcal)} | P: ${r1(macros.protein_g)}g | C: ${r1(macros.carbs_g)}g | F: ${r1(macros.fat_g)}g\n`);
(hohara29          2025-09-29 23:42:41 -0400 88) }
(hohara29          2025-09-29 23:42:41 -0400 89) 
(hohara29          2025-09-29 23:42:41 -0400 90) run().catch(e => {
(hohara29          2025-09-29 23:42:41 -0400 91)   console.error('Error:', e.message);
(hohara29          2025-09-29 23:42:41 -0400 92)   process.exit(2);
(hohara29          2025-09-29 23:42:41 -0400 93) });
(hohara29          2025-09-29 23:42:41 -0400 94) 
